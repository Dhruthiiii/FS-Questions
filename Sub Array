/* 
A subarray of an n-element array is an array composed from a contiguous block of the original array's
elements. 
For example, if array = [1, 2, 3], then the subarrays are [1], [2], [3], [1,2], [2,3], and [1, 2, 3]. 

Something like [1,3] would not be a subarray as it's not a contiguous subsection of the original
array.

    > The sum of an array is the total sum of its elements.
    > An array's sum is negative if the total sum of its elements is negative.
    > An array's sum is positive if the total sum of its elements is positive.
    
Given an array of n integers, find and print its number of negative subarrays on a new line.


Sample Input
5 //size of arrays
1 -2 4 -5 1 //array elements
Sample Output
9 //no. of subarrays

Explanation :

There are nine negative subarrays of A = [1, —2, 4, —5, 1]:
1. [1:1] => -2

2. [3:3] => -5

3. [0:1] = 1 + -2 => -1

4. [2:3] = 4 + -5 => -1

5. [3:4] = -5  + 1 => -4

6. [1:3] = -2  + 4 + -5 => -3

7. [0:3] = 1 + -2 + 4 + -5 => -2

8. [1:4] = -2 + 4 + -5 + 1 => -2

9. [0:4] = 1  +-2 + 4 + -5 + 1 => -1

Thus, we print 9 on a new line.

*/
import java.util.*;
class Test
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        {
            a[i]=sc.nextInt();
        }
        int subA=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                int sum=0;
                for(int k=i;k<=j;k++)
                {
                    sum=sum+a[k];
                }
                if(sum < 0)
                {
                    subA++;
                }
            }
        }
        System.out.println(subA);
    }
}
